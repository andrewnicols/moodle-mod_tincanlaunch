{"version":3,"file":"launch.min.js","sources":["../src/launch.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handles display of the launch attempt table (registrations).\n *\n * @package\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author    David Pesce  <david.pesce@exputo.com>\n * @module    mod_tincanlaunch/launch\n */\n\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nlet id = '';\nlet cid = '';\nlet simplifiedlaunch = false;\n\nlet SELECTORS = {\n    ATTEMPT_PROGRESS: '#tincanlaunch_attemptprogress',\n    ATTEMPT_TABLE: '#tincanlaunch_attempttable',\n    COMPLETION_CHECK: '#tincanlaunch_completioncheck',\n    EXIT: '#tincanlaunch_exit',\n    LAUNCH_FORM: '#launchform',\n    MAINCONTENT: '#maincontent',\n    NEW_ATTEMPT: '#tincanlaunch_newattempt',\n    SIMPLIFIED: '#tincanlaunch_simplified',\n    SIMPLIFIED_LINK: '[id^=tincanlaunch_simplifiedlink-]',\n    NEW_ATTEMPT_LINK: '[id^=tincanlaunch_newattemptlink-]',\n    REATTEMPT: '[id^=tincanrelaunch_attempt-]',\n    REGISTRATION: '#launchform_registration',\n    STATUSDIV: '#tincanlaunch_status',\n    STATUSPARA: '#tincanlaunch_status_para'\n};\n\nexport const init = (courseid) => {\n\n    // Retrieve id and n URL parameters\n    let urlparams = new URLSearchParams(window.location.search);\n    id = urlparams.get('id');\n    cid = courseid;\n\n    // This is a simplified navigation launch\n    if ($(SELECTORS.SIMPLIFIED).length) {\n        simplifiedlaunch = true;\n        let simplifiedid = $(SELECTORS.SIMPLIFIED_LINK).attr('id').substring(28);\n        launchExperience(simplifiedid);\n    } else {\n        // Iterate over existing registrations and add necessary values.\n        $(SELECTORS.REATTEMPT).each(function() {\n            let registrationid = $(this).attr('id').substring(23);\n\n            // Listen for keyUp event.\n            $(this).on(\"keyup\", function(e) {\n                keyTest(e.key, registrationid);\n            });\n\n            // Listen for click event.\n            $(this).on(\"click\", function() {\n                launchExperience(registrationid);\n            });\n\n            // Add tabindex and cursor.\n            $(this).attr('tabindex', '0');\n            $(this).attr('class', 'btn btn-primary');\n        });\n\n        // Add details to new attempt link.\n        let newregistrationid = $(SELECTORS.NEW_ATTEMPT_LINK).attr('id').substring(28);\n        $(SELECTORS.NEW_ATTEMPT_LINK).attr('tabindex', '0');\n\n        $(SELECTORS.NEW_ATTEMPT_LINK).on(\"click\", function() {\n            launchExperience(newregistrationid);\n        });\n\n        $(SELECTORS.NEW_ATTEMPT_LINK).on(\"keyup\", function(e) {\n            keyTest(e.key, newregistrationid);\n        });\n    }\n\n    // Periodically check completion\n    setInterval(function() {\n        $(SELECTORS.COMPLETION_CHECK).load('completion_check.php?id=' + id);\n    }, 30000); // TODO: make this interval a configuration setting.\n};\n\nconst keyTest = (keycode, registrationid) => {\n    if (keycode === 'Enter' || keycode === ' ') {\n        launchExperience(registrationid);\n    }\n};\n\nconst launchExperience = (registrationid) => {\n    // Add status para.\n    let statuspara = $(\"<p></p>\").attr(\"id\", \"tincanlaunch_status_para\");\n\n    // Add completion span.\n    let completionspan = $(\"<span>\").attr(\"id\", \"tincanlaunch_completioncheck\");\n    $(SELECTORS.STATUSDIV).append(statuspara, completionspan);\n\n    const spawnedWindow = window.open('launch.php?launchform_registration=' + registrationid + '&id=' + id);\n\n    // Check every second to see if the spawned window was closed.\n    const checkWindow = setInterval(() => {\n        if (spawnedWindow.closed) {\n            window.console.log('xAPI content window was closed.');\n            clearInterval(checkWindow); // Stop checking for window closure\n\n            // Perform a final completion check.\n            $(SELECTORS.COMPLETION_CHECK).load('completion_check.php?id=' + id);\n\n            // Redirect to the course page.\n            if (simplifiedlaunch) {\n                window.location.href = \"/course/view.php?id=\" + cid;\n            } else {\n                window.location.href = \"view.php?id=\" + id;\n            }\n        }\n    }, 1000);\n\n    let stringsToRetrieve = [\n        {\n            key: 'tincanlaunch_progress',\n            component: 'tincanlaunch'\n        },\n        {\n            key: 'returntocourse',\n            component: 'tincanlaunch'\n        },\n        {\n            key: 'returntoregistrations',\n            component: 'tincanlaunch'\n        }\n    ];\n\n    $(SELECTORS.NEW_ATTEMPT).remove();\n    $(SELECTORS.ATTEMPT_TABLE).remove();\n\n    Str.get_strings(stringsToRetrieve)\n        .done(function(s) {\n            // Attempt in progress.\n            $(SELECTORS.STATUSPARA).text(s[0]);\n\n            // Return to course or registrations table.\n            let exitpara = $(\"<p></p>\").attr(\"id\", SELECTORS.EXIT);\n            if (simplifiedlaunch) {\n                exitpara.html(\"<a href='/course/view.php?id=\" + cid + \"'>\" + s[1] + \"</a>\");\n            } else {\n                exitpara.html(\"<a href='/course/view.php?id=\" + cid + \"'>\" + s[2] + \"</a>\");\n            }\n\n            $(SELECTORS.STATUSPARA).after(exitpara);\n    });\n};"],"names":["id","cid","simplifiedlaunch","SELECTORS","courseid","urlparams","URLSearchParams","window","location","search","get","length","simplifiedid","attr","substring","launchExperience","each","registrationid","this","on","e","keyTest","key","newregistrationid","setInterval","load","keycode","statuspara","completionspan","append","spawnedWindow","open","checkWindow","closed","console","log","clearInterval","href","remove","Str","get_strings","component","done","s","text","exitpara","html","after"],"mappings":";;;;;;;;0jCA2BIA,GAAK,GACLC,IAAM,GACNC,kBAAmB,EAEnBC,wBAEe,6BAFfA,2BAGkB,gCAHlBA,eAIM,qBAJNA,sBAOa,2BAPbA,qBAQY,2BARZA,0BASiB,qCATjBA,2BAUkB,qCAVlBA,oBAWW,gCAXXA,oBAaW,uBAbXA,qBAcY,0CAGI,SAACC,cAGbC,UAAY,IAAIC,gBAAgBC,OAAOC,SAASC,WACpDT,GAAKK,UAAUK,IAAI,MACnBT,IAAMG,UAGF,mBAAED,sBAAsBQ,OAAQ,CAChCT,kBAAmB,MACfU,cAAe,mBAAET,2BAA2BU,KAAK,MAAMC,UAAU,IACrEC,iBAAiBH,kBACd,qBAEDT,qBAAqBa,MAAK,eACpBC,gBAAiB,mBAAEC,MAAML,KAAK,MAAMC,UAAU,wBAGhDI,MAAMC,GAAG,SAAS,SAASC,GACzBC,QAAQD,EAAEE,IAAKL,uCAIjBC,MAAMC,GAAG,SAAS,WAChBJ,iBAAiBE,uCAInBC,MAAML,KAAK,WAAY,yBACvBK,MAAML,KAAK,QAAS,0BAItBU,mBAAoB,mBAAEpB,4BAA4BU,KAAK,MAAMC,UAAU,wBACzEX,4BAA4BU,KAAK,WAAY,yBAE7CV,4BAA4BgB,GAAG,SAAS,WACtCJ,iBAAiBQ,0CAGnBpB,4BAA4BgB,GAAG,SAAS,SAASC,GAC/CC,QAAQD,EAAEE,IAAKC,sBAKvBC,aAAY,+BACNrB,4BAA4BsB,KAAK,2BAA6BzB,MACjE,UAGDqB,QAAU,SAACK,QAAST,gBACN,UAAZS,SAAmC,MAAZA,SACvBX,iBAAiBE,iBAInBF,iBAAmB,SAACE,oBAElBU,YAAa,mBAAE,WAAWd,KAAK,KAAM,4BAGrCe,gBAAiB,mBAAE,UAAUf,KAAK,KAAM,oDAC1CV,qBAAqB0B,OAAOF,WAAYC,oBAEpCE,cAAgBvB,OAAOwB,KAAK,sCAAwCd,eAAiB,OAASjB,IAG9FgC,YAAcR,aAAY,WACxBM,cAAcG,SACd1B,OAAO2B,QAAQC,IAAI,mCACnBC,cAAcJ,iCAGZ7B,4BAA4BsB,KAAK,2BAA6BzB,IAI5DO,OAAOC,SAAS6B,KADhBnC,iBACuB,uBAAyBD,IAEzB,eAAiBD,MAGjD,yBAiBDG,uBAAuBmC,6BACvBnC,yBAAyBmC,SAE3BC,IAAIC,YAlBoB,CACpB,CACIlB,IAAK,wBACLmB,UAAW,gBAEf,CACInB,IAAK,iBACLmB,UAAW,gBAEf,CACInB,IAAK,wBACLmB,UAAW,kBAQdC,MAAK,SAASC,uBAETxC,sBAAsByC,KAAKD,EAAE,QAG3BE,UAAW,mBAAE,WAAWhC,KAAK,KAAMV,gBACnCD,iBACA2C,SAASC,KAAK,gCAAkC7C,IAAM,KAAO0C,EAAE,GAAK,QAEpEE,SAASC,KAAK,gCAAkC7C,IAAM,KAAO0C,EAAE,GAAK,4BAGtExC,sBAAsB4C,MAAMF"}